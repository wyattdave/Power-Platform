{"version":"0.2.0","body":"\n\nfunction main(workbook: ExcelScript.Workbook, aQuestions: intQuestions[], oAnswers: intResponse, iPassScore: number) {\n\n    const aAnswers: intAnswers[] = JSON.parse(oAnswers.answers) // convert anwers striing to array\n    let data: intQuestScoring[] = []; // new array to pass back each question, answer, points and if passed\n    let bCorrectAnswer: boolean; // for each question flag to see if correct\n    let iPoints: number = 0 //total points avaialble for test\n    let iPoint: number; // points per question \n    let iTotalPoints: number = 0; // total points scored\n    let sCorrect: string; //correct answer\n\n    aQuestions.forEach((item, i, arr) => {\n        const sAnswer = aAnswers.find(q => (q.questionId == item.id)).answer1\n        if (item.type == \"Question.Choice\") {\n            const oQuestInfo: intquestionInfo_Choices = JSON.parse(item.questionInfo);\n            const aChoice: intChoices[] = oQuestInfo.Choices;\n            const aCorrect: intChoices[] = aChoice.filter(a => (a.IsAnswerKey))\n            sCorrect = JSON.stringify(aCorrect);\n\n            if (oQuestInfo.ChoiceType == 1) {\n                bCorrectAnswer = sAnswer == aCorrect[0].Description;\n            } else {\n                const aMulitAnswer: [] = JSON.parse(sAnswer)\n                const aFindCorrect = aCorrect.filter(a => {\n                    return sAnswer.includes(a.Description)\n                })\n                bCorrectAnswer = (aFindCorrect.length == aCorrect.length) && (aCorrect.length == aMulitAnswer.length);\n            }\n\n            if (bCorrectAnswer) {\n                iPoints += oQuestInfo.Point\n                iPoint = oQuestInfo.Point;\n            } else {\n                iPoint = 0;\n            }\n            iTotalPoints += oQuestInfo.Point;\n        }\n\n        if (item.type == \"Question.TextField\") {\n            const oQuestInfo: intquestionInfo_Text = JSON.parse(item.questionInfo);\n            if (oQuestInfo.hasOwnProperty('GradingBasis')) {\n                sCorrect = oQuestInfo.GradingBasis;\n                const aCorrect: intGradingBasis[] = JSON.parse(sCorrect)\n                const aFindCorrect = aCorrect.filter(a => {\n                    return a.answer == sAnswer\n                })\n                bCorrectAnswer = aFindCorrect.length > 0\n\n                if (bCorrectAnswer) {\n                    iPoints += oQuestInfo.Point\n                    iPoint = oQuestInfo.Point;\n                } else {\n                    iPoint = 0;\n                }\n\n                if (oQuestInfo.Point) {\n                    iTotalPoints += oQuestInfo.Point;\n                }\n            }\n        }\n\n        data.push({\n            id: item.id,\n            questionInfo: sCorrect,\n            type: item.type,\n            answer: sAnswer,\n            points: iPoint,\n            correct: bCorrectAnswer\n        })\n    })\n\n    const oReturn: intReturn = {\n        pass: iPoints >= iPassScore, //have they passed\n        points: iPoints, //points scored\n        passPoints: iPassScore, // required points to pass\n        totalPoints: iTotalPoints, // total available points\n        data: data // array of answers and correct answers for validation\n    }\n \n    return (oReturn)\n}\n\ninterface intQuestions {\n    id: string,\n    questionInfo: string,\n    type: string\n}\n\ninterface intResponse {\n    id: number,\n    responder: string,\n    submitDate: string,\n    answers: string,\n    responderName: string\n}\n\ninterface intQuestScoring {\n    id: string,\n    questionInfo: string,\n    type: string,\n    points: number,\n    correct: boolean,\n    answer: string\n}\n\ninterface intReturn {\n    pass: boolean,\n    points: number,\n    passPoints: number,\n    totalPoints: number,\n    data: intQuestScoring[]\n}\n\ninterface intAnswers {\n    answer1: string,\n    questionId: string\n}\n\ninterface intquestionInfo_Choices {\n    Choices: intChoices[],\n    ChoiceType: number,\n    AllowOtherAnswer: boolean,\n    OptionDisplayStyle: string,\n    ChoiceRestrictionType: string,\n    ShowRatingLabel: boolean,\n    Point: number\n}\n\ninterface intChoices {\n    Description: string;\n    FormsProDisplayRTText: string,\n    IsAnswerKey: boolean\n}\n\ninterface intquestionInfo_Text {\n    Multiline: boolean,\n    ShowRatingLabel: boolean,\n    Point: number,\n    GradingBasis: string\n}\n\ninterface intGradingBasis {\n    answer: string,\n    questionId: string\n}\n","description":"","parameterInfo":"{\"version\":1,\"originalParameterOrder\":[{\"name\":\"aQuestions\",\"index\":0},{\"name\":\"oAnswers\",\"index\":1},{\"name\":\"iPassScore\",\"index\":2}],\"parameterSchema\":{\"type\":\"object\",\"required\":[\"aQuestions\",\"oAnswers\",\"iPassScore\"],\"properties\":{\"aQuestions\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"questionInfo\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}}}},\"oAnswers\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"number\"},\"responder\":{\"type\":\"string\"},\"submitDate\":{\"type\":\"string\"},\"answers\":{\"type\":\"string\"},\"responderName\":{\"type\":\"string\"}}},\"iPassScore\":{\"type\":\"number\"}}},\"returnSchema\":{\"type\":\"object\",\"properties\":{\"result\":{\"type\":\"object\",\"properties\":{\"pass\":{\"type\":\"boolean\"},\"points\":{\"type\":\"number\"},\"passPoints\":{\"type\":\"number\"},\"totalPoints\":{\"type\":\"number\"},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"questionInfo\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"},\"points\":{\"type\":\"number\"},\"correct\":{\"type\":\"boolean\"},\"answer\":{\"type\":\"string\"}}}}}}}},\"signature\":{\"comment\":\"\",\"parameters\":[{\"name\":\"workbook\",\"comment\":\"\"},{\"name\":\"aQuestions\",\"comment\":\"\"},{\"name\":\"oAnswers\",\"comment\":\"\"},{\"name\":\"iPassScore\",\"comment\":\"\"}]}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}