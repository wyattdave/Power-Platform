{"version":"0.3.0","body":"async function main(workbook: ExcelScript.Workbook) {\n    const wsConfigs = workbook.getWorksheet(\"Configs\");\n    const wsOutputs = workbook.getWorksheet(\"Outputs\");\n    let sTokenList = wsConfigs.getRange(\"tokenBap\").getText().replace(\"Bearer \", \"\");\n    let sTokenPatch = wsConfigs.getRange(\"tokenDynamics\").getText().replace(\"Bearer \", \"\");\n    const sApiPath = wsConfigs.getRange(\"apiList\").getText();\n    const sApiPath2 = wsConfigs.getRange(\"apiPatch\").getText();\n    const sMode = wsConfigs.getRange(\"mode\").getText();\n\n    if (sMode == \"List\") {\n        if (!sTokenList) {\n            console.log(\"Bap Token is missing.\");\n            return;\n        }\n        try {\n            const iRows = wsOutputs.getUsedRange().getRowCount();\n            wsOutputs.getRange(\"a2:g\" + iRows).clear();\n            const response = await fetch(sApiPath, {\n                method: \"GET\",\n                headers: {\n                    \"Authorization\": `Bearer ${sTokenList}`,\n                    \"Accept\": \"application/json\"\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`API call failed with status: ${response.status}`);\n            }\n            const data: resp = await response.json();\n            console.log(data)\n            let i: number = 2;\n            data.value.forEach(item => {\n                wsOutputs.getRange(\"a\" + i).setValue(item.properties.displayName);\n                if (item.properties.linkedEnvironmentMetadata != undefined) {\n                    wsOutputs.getRange(\"b\" + i).setValue(item.properties.linkedEnvironmentMetadata.resourceId);\n                    wsOutputs.getRange(\"c\" + i).setValue(item.properties.linkedEnvironmentMetadata.instanceUrl);\n                    wsOutputs.getRange(\"d\" + i).setValue(item.location);\n                    wsOutputs.getRange(\"e\" + i).setValue(item.properties.environmentSku);\n                    wsOutputs.getRange(\"f\" + i).setValue(i);\n                }\n                i++;\n            })\n        } catch (error) {\n            console.log(\"Error calling the API:\", error);\n            wsOutputs.getRange(\"a2\").setValue(error.message);\n        }\n    }\n    if (sMode == \"update\") {\n        try {\n            if (!sTokenPatch) {\n                console.log(\"Token is missing.\");\n                return;\n            }\n            const sGeo = wsConfigs.getRange(\"geo\").getText();\n            const sType = wsConfigs.getRange(\"type\").getText();\n            const sBody = wsConfigs.getRange(\"body\").getText();\n            const payload: body = JSON.parse(sBody);\n            const iRows = wsOutputs.getUsedRange().getRowCount();\n            for (let i = 2; i <= iRows; i++) {\n                if (wsOutputs.getRange(\"d\" + i).getText() == sGeo) {\n                    const sEnvironmentType = wsOutputs.getRange(\"e\" + i).getText()\n                    if ((sType == \"Not Teams\" && sEnvironmentType != \"Teams\") ||\n                        sType == sEnvironmentType ||\n                        sType == \"All\"\n                    ) {\n                        const apiUrl = wsOutputs.getRange(\"c\" + i).getText() + sApiPath2 + wsOutputs.getRange(\"b\" + i).getText() + \")\";\n                        const response = await fetch(apiUrl, {\n                            method: \"PATCH\",\n                            headers: {\n                                \"Authorization\": `Bearer ${sTokenPatch}`,\n                                \"Accept\": \"application/json\",\n                                \"Content-Type\": \"application/json\"\n                            },\n                            body: JSON.stringify(payload)\n                        });\n                        wsOutputs.getRange(\"g\" + i).setValue(response.status);\n                    }\n                }\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    }\n}\n\ninterface token {\n    expires_in: number,\n    ext_expires_in: number,\n    expires_on: number,\n    not_before: number,\n    resource: string,\n    access_token: string\n}\ninterface body {\n    enableipbasedcookiebinding: boolean,\n    ipbasedstorageaccesssignaturesMode: number,\n    applicationbasedaccesscontrolsMode: number\n    restrictGuestUserAccess: boolean\n    auditretentionperiodv2: number\n    isauditenabled: boolean\n}\ninterface linked {\n    resourceId: string,\n    uniqueName: string,\n    domainName: string,\n    instanceUrl: string\n}\ninterface properties {\n    tenantId: string,\n    displayName: string,\n    creationType: string,\n    environmentSku: string,\n    isDefault: boolean,\n    linkedEnvironmentMetadata: linked\n}\ninterface items {\n    name: string,\n    location: string\n    properties: properties\n}\ninterface resp {\n    value: items[]\n}","description":"","parameterInfo":"{\"version\":1,\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}},\"signature\":{\"comment\":\"\",\"parameters\":[{\"name\":\"workbook\",\"comment\":\"\"}]}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}","noCodeMetadata":""}